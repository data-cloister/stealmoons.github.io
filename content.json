{"pages":[],"posts":[{"title":"我的第一篇博客","text":"##环境准备 下载并安装node 下载并安装git#####修改config.yaml文件每次修改完_config.yaml文件后都要在终端清一下，重新生成一下，重新server一下或者说start一下：hexo cleanhexo ghexo s然后就可以在 http://localhost:4000 本地4000端口看一下效果之后 Clrt+c 退出然后推到远端，hexo.d（d 指的是 deploy） ###下载并播放音乐####使用Hexo插件插入音乐/视频两个好用的hexo插件： hexo-tag-aplayer：https://github.com/grzhan/hexo-tag-aplayer) hexo-tag-dplayer： https://github.com/NextMoe/hexo-tag-dplayer ####播放音乐的aplayer 在cmd页面内，使用npm或cnpm安装： 1npm install hexo-tag-aplayer 在markdown内添加以下代码： 1{% aplayer &quot;她的睫毛&quot; &quot;周杰伦&quot; &quot;http://home.ustc.edu.cn/~mmmwhy/%d6%dc%bd%dc%c2%d7%20-%20%cb%fd%b5%c4%bd%de%c3%ab.mp3&quot; &quot;http://home.ustc.edu.cn/~mmmwhy/jay.jpg&quot; &quot;autoplay=false&quot; %} 这是一个标题","link":"/2019/10/13/我的第一篇博客/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/10/13/hello-world/"},{"title":"gotty","text":"GoTTY1.定义： GoTTY是一个用go语言开发的工具，它启动一个web应用服务，可以将任何指定的终端应用映射到指定的http端口，这样在防火墙内部的客户端就可以通过普通的浏览器Chrome, Firefox来访问。 git网址为： https://github.com/yudai/gotty#options 2.安装(1)方法一： 下载文件从 https://github.com/yudai/gotty/releases 上下载文件请注意，标记的发行版 Pre-release 是为测试目的而构建的，其中可能包括不稳定或重大更改。最好是下载标记的 Latest release 稳定版。（以 darwin_amd64 命名的文件适用于Mac OS X用户） 解压解压到配置好的 GOBIN 环境变量中（此处是解压到 usr/soft/go/bin）1$ tar zxvf /usr/soft/gotty_linux_amd64.tar.gz -C /usr/soft/go/bin (2)方法二： 通过 Homebrew 进行下载（Moc OS X）1$ brew install yudai/gotty/gotty (3)方法三： go 配置配置环境变量(编译环境)123456789101112# 为了方便后续环境变量配置，我一并创建了/usr/soft/gopath$ vim /etc/profile# 点击i进入vi编辑模式在文件最后添加如下四行export GOROOT=/usr/soft/goexport GOBIN=$GOROOT/binexport GOPATH=/usr/soft/gopathexport PATH=$PATH:$GOROOT/bin:$GOBIN:$GOPATH/bin# 按Esc键进入命令模式，然后输入&apos;:wq&apos;保存退出# 让配置文件立即生效，键入：$ source /etc/profile 查看是否生效1234567# 安装完成后可以运行下列命令检测：$ go versiongo version go1.7.5 linux/amd64# 查看GOPATH是否生效$ go env GOPATH/usr/soft/gopath GoTTY安装使用go get命令来安装 1$ go get github.com/yudai/gotty 上面的命令会在你的 GOBIN 环境变量中安装 GoTTY 的二进制，做如下检查： 12345678# 查看 GOBIN 地址$ $GOBIN/-bash: /usr/soft/go/bin/: Is a directory# 查看 gotty$ cd /usr/soft/go/bin$ lsgo godoc gofmt gotty 3.使用GoTTY 用法1Usage: gotty [options] &lt;command&gt; [&lt;arguments...&gt;] 例如：现在用 GoTTY 运行任意命令，如 df 来从 Web 浏览器中查看系统分区空间及使用率 1$ gotty df -h GoTTY 默认会在 8080 启动一个 Web 服务器，在浏览器打开就仿佛在终端中一样如果是交互命令, 那么要使用 -w 参数，就可以从浏览器中输入命令了，例如： 1$ gotty -w bash 4.自定义GoTTY 可以在 ~/.gotty 配置文件中修改默认选项，如果该文件存在，它会在每次启动时加载这个文件 创建 .gotty 文件： 1$ touch ~/.gotty 在配置文件中添加需要设置的值，例如： 123456789$ vim .gotty//将端口改为9000：port = &quot;9000&quot;//设置字号和背景色：preferences {font_size = 5background_color = &quot;rgb(16, 16, 32)&quot;} 更详细的说明： https://github.com/yudai/gotty/blob/master/.gotty 注意：配置文件中的行末不加逗号 5.在GoTTY中使用安全功能由于 GoTTY 默认不提供可靠的安全保障，需要手动使用下面说明的某些安全功能。 （1） 允许客户端在浏览器终端中输入命令 默认情况下，GoTTY 不允许客户端输入到 TTY 中，它只支持窗口缩放。但是，可以使用 -w 或 –permit-write 选项来允许客户端写入 TTY，但是并不推荐这么做因为会有安全威胁。 （2） 使用基本验证（用户名和密码）运行 GoTTY 尝试激活基本身份验证机制，这样客户端将需要输入指定的用户名和密码才能连接到 GoTTY 服务器。以下命令使用 -c 选项限制客户端访问，以向用户询问指定的凭据。glances 用于显示系统监控统计信息。这里一定要先在配置文件 .gotty 中写入：（否则输入 -c 是不管用的） 12enable_basic_auth = truecredential = &quot;user:pass&quot; 然后在终端输入： 1$ gotty -w -p &quot;9001&quot; -c &quot;test:67890&quot; glances 注意： 用户名和密码之间用冒号隔开 （3） 生成随机 URL 限制访问服务器的另一种方法是使用 -r 选项，GoTTY 会生成一个随机 URL，这样只有知道该 URL 的用户才可以访问该服务器。例如： 123456$ gotty -r df -hLoading config file at: /root/.gottyGoTTY is starting with command: df -hHTTP server is listening at: http://:::9000/q40p5atx/Alternative URL: http://127.0.0.1:9000/q40p5atx/ 也可以在 .gotty 配置文件中加入以下内容：这样命令行中不加 -r 也会出现随机 URL 12//[bool] Enable random URL generationenable_random_url = true （4） 带有 SSL/TLS 使用 GoTTY 当你通过 GoTTY 发送秘密信息（如用户凭据或任何其他信息）时，你需要使用 -t 或 –tls 选项才能在会话中启用 TLS/SSL。默认情况下，GoTTY 会读取证书文件 ~/.gotty.crt 和密钥文件 ~/.gotty.key，因此，首先使用下面的 openssl 命令创建一个自签名的证书以及密钥（ 回答问题以生成证书和密钥文件） 12345678910$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ~/.gotty.key -out ~/.gotty.crt//输出内容为：Country Name (2 letter code) [AU]:CN ←- 国度名目，中国输入CNState or Province Name (full name) [Some-State]:BeiJing ←- 省名，拼音 Locality Name (eg, city) []:BeiJing ←- 市名，拼音Organization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany ←- 公司英文名Organizational Unit Name (eg, section) []:test ←- 能够不输入Common Name (eg, YOUR name) []:root ←- 服务器主机名，若填写不准确，博览器会报告证书无效，但并不波及利用Email Address []: ←- 电子邮箱，可随意填 6.与多个客户端分享终端你可以使用终端复用程序(将终端分成多个会话)来与多个客户端共享一个进程。 （1） 安装 tmux 由于tmux依赖于libevent和ncurses-devel，所以应首先有这两个库，和相关的头文件。 1234567891011121314151617181920//安装 ncurses-devel$ tar -zxvf ncurses.tar.gz$ cd ncurses-6.0$ ./configure --with-shared --without-debug --without-ada --enable-overwrite$ make$ make install//安装 libevent$ tar -xzf libevent-2.0.20-stable.tar.gz$ cd libevent-2.0.20-stable$ ./configure --prefix=/tmp/libevent$ make $ make install//安装 tmux$ tar -zxvf tmux-1.7.tar.gz$ cd tmux-1.7$ CFLAGS=&quot;-I/tmp/libevent/include&quot; LDFLAGS=&quot;-L/tmp/libevent/lib&quot; ./configure --prefix=/usr/local/tmux$ make$ sudo make install 在 .bashrc 文件中加入 PATH=/usr/local/tmux/bin:$PATH，使得命令查找路径含有/usr/local/tmux/bin/ 。然后执行 source ~/.bashrc 使得配置生效。 1234567891011$ vim .bashrcPATH=/usr/local/tmux/bin:$PATH$ source ~/.bashrc//执行 tmux 命令，若出现一下错误：tmux: error while loading shared libraries: libevent-2.1.so.7: cannot open shared object file: No such file or directory//可执行下面的命令将库拷到默认路径下：sudo cp /tmp/libevent/lib/libevent-2.1.so.7 /usr/lib//若依然无法找到，可在/etc/ld.so.conf中增加一行/usr/lib，保存后，执行ldconfig （2） 使用 tmux 12345678910//创建一个名为 gotty 的会话$ tmux new -s gotty$ gotty -w bash//分离当前会话$ Ctrl+b d//查询所有(包括会话、窗口、窗格)$ Ctrl+b w 7.嵌入（1） 通过前端实现 GoTTY使用xterm.js和hterm在Web浏览器上运行基于JavaScript的终端。GoTTY本身提供了一个Websocket服务器，该服务器简单地将TTY的输出中继到客户端，并从客户端接收输入并将其转发到TTY。通过 npm 安装 1$ npm install xterm 要在浏览器上开始使用xterm.js，将xterm.js和xterm.css添加到html页面的开头。然后创建一个 div， xterm可以附加其自身的对象。最后实例化该Terminal对象，然后用div的DOM对象调用open函数。 123456789101112131415&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;node_modules/xterm/css/xterm.css&quot; /&gt; &lt;script src=&quot;node_modules/xterm/lib/xterm.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;terminal&quot;&gt;&lt;/div&gt; &lt;script&gt; var term = new Terminal(); term.open(document.getElementById(&apos;terminal&apos;)); term.write(&apos;Hello from \\x1B[1;3;31mxterm.js\\x1B[0m $ &apos;) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 这里公司已经有公共组件：nzi-console （2） 通过后端实现 java 实现远程连接 linux 并执行命令1）登录主机2）远程执行命令3）解析返回的结果 附录附录一：gotty指令1234567891011121314151617181920212223242526--address value, -a value IP address to listen (default: &quot;0.0.0.0&quot;) [$GOTTY_ADDRESS]--port value, -p value Port number to liten (default: &quot;8080&quot;) [$GOTTY_PORT]--permit-write, -w Permit clients to write to the TTY (BE CAREFUL) [$GOTTY_PERMIT_WRITE]--credential value, -c value Credential for Basic Authentication (ex: user:pass, default disabled) [$GOTTY_CREDENTIAL]--random-url, -r Add a random string to the URL [$GOTTY_RANDOM_URL]--random-url-length value Random URL length (default: 8) [$GOTTY_RANDOM_URL_LENGTH]--tls, -t Enable TLS/SSL [$GOTTY_TLS]--tls-crt value TLS/SSL certificate file path (default: &quot;~/.gotty.crt&quot;) [$GOTTY_TLS_CRT]--tls-key value TLS/SSL key file path (default: &quot;~/.gotty.key&quot;) [$GOTTY_TLS_KEY]--tls-ca-crt value TLS/SSL CA certificate file for client certifications (default: &quot;~/.gotty.ca.crt&quot;) [$GOTTY_TLS_CA_CRT]--index value Custom index.html file [$GOTTY_INDEX]--title-format value Title format of browser window (default: &quot;{{ .command }}@{{ .hostname }}&quot;) [$GOTTY_TITLE_FORMAT]--reconnect Enable reconnection [$GOTTY_RECONNECT]--reconnect-time value Time to reconnect (default: 10) [$GOTTY_RECONNECT_TIME]--max-connection value Maximum connection to gotty (default: 0) [$GOTTY_MAX_CONNECTION]--once Accept only one client and exit on disconnection [$GOTTY_ONCE]--timeout value Timeout seconds for waiting a client(0 to disable) (default: 0) [$GOTTY_TIMEOUT]--permit-arguments Permit clients to send command line arguments in URL (e.g. http://example.com:8080/?arg=AAA&amp;arg=BBB) [$GOTTY_PERMIT_ARGUMENTS]--width value Static width of the screen, 0(default) means dynamically resize (default: 0) [$GOTTY_WIDTH]--height value Static height of the screen, 0(default) means dynamically resize (default: 0) [$GOTTY_HEIGHT]--ws-origin value A regular expression that matches origin URLs to be accepted by WebSocket. No cross origin requests are acceptable by default [$GOTTY_WS_ORIGIN]--term value Terminal name to use on the browser, one of xterm or hterm. (default: &quot;xterm&quot;) [$GOTTY_TERM]--close-signal value Signal sent to the command process when gotty close it (default: SIGHUP) (default: 1) [$GOTTY_CLOSE_SIGNAL]--close-timeout value Time in seconds to force kill process after client is disconnected (default: -1) (default: -1) [$GOTTY_CLOSE_TIMEOUT]--config value Config file path (default: &quot;~/.gotty&quot;) [$GOTTY_CONFIG]--version, -v print the version 附录二：tmux指令 会话管理 123456789101112131415161718//常用命令tmux new 创建默认名称的会话（在tmux命令模式使用new命令可实现同样的功能，其他命令同理，后文不再列出tmux终端命令）tmux new -s mysession 创建名为mysession的会话tmux ls 显示会话列表tmux a 连接上一个会话tmux a -t mysession 连接指定会话tmux rename -t s1 s2 重命名会话s1为s2tmux kill-session 关闭上次打开的会话tmux kill-session -t s1 关闭会话s1tmux kill-session -a -t s1 关闭除s1外的所有会话tmux kill-server 关闭所有会话常用快捷键( prefix 指 Ctrl+b )prefix s 列出会话，可进行切换prefix $ 重命名会话prefix d 分离当前会话prefix D 分离指定会话 窗口管理 123456789101112prefix c 创建一个新窗口prefix , 重命名当前窗口prefix w 列出所有窗口，可进行切换prefix n 进入下一个窗口prefix p 进入上一个窗口prefix l 进入之前操作的窗口prefix 0~9 选择编号0~9对应的窗口prefix . 修改当前窗口索引编号prefix &apos; 切换至指定编号（可大于9）的窗口prefix f 根据显示的内容搜索窗格prefix &amp; 关闭当前窗口 窗格管理 123456789101112131415prefix % 水平方向创建窗格prefix &quot; 垂直方向创建窗格prefix Up|Down|Left|Right 根据箭头方向切换窗格prefix q 显示窗格编号prefix o 顺时针切换窗格prefix } 与下一个窗格交换位置prefix { 与上一个窗格交换位置prefix x 关闭当前窗格prefix space(空格键) 重新排列当前窗口下的所有窗格prefix ! 将当前窗格置于新窗口prefix Ctrl+o 逆时针旋转当前窗口的窗格prefix t 在当前窗格显示时间prefix z 放大当前窗格(再次按下将还原)prefix i 显示当前窗格信息 其他命令 123tmux list-key 列出所有绑定的键，等同于prefixtmux list-command 列出所有命令 powershell 也有类似功能，可以运行在浏览器里。","link":"/2019/11/01/gotty/"}],"tags":[],"categories":[]}